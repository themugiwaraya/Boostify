import aiohttp
import os
import logging
import json
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardMarkup, ReplyKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

load_dotenv()

API_KEY = os.getenv("API_KEY")
BOT_TOKEN = os.getenv("BOT_TOKEN")
API_URL = os.getenv("API_URL")

async def calculate_price(service_id, quantity):
    """–í—ã—á–∏—Å–ª—è–µ—Ç –∏—Ç–æ–≥–æ–≤—É—é —Ü–µ–Ω—É –∑–∞–∫–∞–∑–∞"""
    async with aiohttp.ClientSession() as session:
        try:
            async with session.post(API_URL, data={"key": API_KEY, "action": "services"}) as response:
                data = await response.json()
                for service in data:
                    if str(service.get("service")) == str(service_id):
                        price = float(service.get("rate", 0))
                        total = (price * quantity) / 1000
                        return total, price
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Ü–µ–Ω—ã: {e}")
        return None, None

async def place_order(service_id, link, quantity):
    async with aiohttp.ClientSession() as session:
        try:
            payload = {
                "key": API_KEY,
                "action": "add",
                "service": service_id,
                "link": link,
                "quantity": quantity
            }
            headers = {"Content-Type": "application/x-www-form-urlencoded"}
            
            async with session.post(API_URL, data=payload, headers=headers) as response:
                data = await response.json()
                logging.info(f"–û—Ç–≤–µ—Ç API: {data}")
                return data.get("order")  
        except Exception as e:
            logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: %s", str(e))
        return None

async def cancel_orders(order_ids: str) -> str:
    """
    –û—Ç–º–µ–Ω—è–µ—Ç –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–∫–∞–∑–æ–≤ —á–µ—Ä–µ–∑ API
    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        order_ids: –°—Ç—Ä–æ–∫–∞ —Å –Ω–æ–º–µ—Ä–∞–º–∏ –∑–∞–∫–∞–∑–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –æ—Ç–º–µ–Ω—ã
    """
    async with aiohttp.ClientSession() as session:
        try:
            payload = {
                "key": API_KEY,
                "action": "cancel",
                "orders": order_ids
            }
            
            async with session.post(API_URL, data=payload) as response:
                text_response = await response.text()
                
                logging.info(f"üìú –û—Ç–≤–µ—Ç API –Ω–∞ –æ—Ç–º–µ–Ω—É –∑–∞–∫–∞–∑–æ–≤:\n{text_response}")
                
                try:
                    data = json.loads(text_response)
                except json.JSONDecodeError:
                    return "‚ùå –û—à–∏–±–∫–∞: —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç."

                if "error" in data:
                    return f"‚ùå –û—à–∏–±–∫–∞: {data['error']}"
                
                return "‚úÖ –ó–∞–∫–∞–∑—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω—ã!"

        except aiohttp.ClientError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–æ–≤: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–æ–≤."
        except Exception as e:
            logging.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–æ–≤: {e}")
            return "‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–æ–≤."

async def fetch_categories():
    async with aiohttp.ClientSession() as session:
        try:
            async with session.post(API_URL, data={"key": API_KEY, "action": "services"}) as response:
                data = await response.json()
                return sorted({s.get("category", "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏") for s in data if "category" in s})
        except Exception as e:
            logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: %s", str(e))
        return []

async def fetch_services(category):
    async with aiohttp.ClientSession() as session:
        try:
            async with session.post(API_URL, data={"key": API_KEY, "action": "services"}) as response:
                data = await response.json()
                if not isinstance(data, list):
                    logging.error("–û—à–∏–±–∫–∞: API –≤–µ—Ä–Ω—É–ª –Ω–µ —Å–ø–∏—Å–æ–∫!")
                    return []

                services = []
                for s in data:
                    service_id = s.get("service") or s.get("id")
                    name = s.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
                    price = s.get("rate", 0)
                    rotation = s.get("rate_per", "1000")

                    if s.get("category") != category:
                        continue

                    if service_id is None:
                        continue

                    try:
                        price = float(price)
                        price = f"{price:.2f} ‚ÇΩ –∑–∞ {rotation}"
                    except (ValueError, TypeError):
                        price = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

                    services.append((service_id, f"ID: {service_id}, –ù–∞–∑–≤–∞–Ω–∏–µ: {name}, –¶–µ–Ω–∞: {price}"))
                
                return services
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Å–ª—É–≥: {e}")
            return []

async def fetch_balance():
    async with aiohttp.ClientSession() as session:
        try:
            async with session.post(API_URL, data={"key": API_KEY, "action": "balance"}) as response:
                data = await response.json()
                return data.get("balance", "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞")
        except Exception as e:
            logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: %s", str(e))
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞"

async def fetch_order_status(order_id: str) -> str:
    async with aiohttp.ClientSession() as session:
        try:
            payload = {"key": API_KEY, "action": "status", "order": order_id}
            async with session.post(API_URL, data=payload) as response:
                text_response = await response.text()

                logging.info(f"\nüìú –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç API:\n{text_response}\n")

                try:
                    data = json.loads(text_response)
                except json.JSONDecodeError:
                    logging.error("‚ùå –û—à–∏–±–∫–∞: API –≤–µ—Ä–Ω—É–ª –Ω–µ JSON. –í–æ–∑–º–æ–∂–Ω–æ, HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –æ—à–∏–±–∫—É.")
                    return "‚ùå –û—à–∏–±–∫–∞: —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç."

                logging.info(f"üîç –†–∞–∑–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {json.dumps(data, indent=4, ensure_ascii=False)}\n")

                if "error" in data:
                    return f"‚ùå –û—à–∏–±–∫–∞: {data['error']}"
                
                status_message = (
                    f"üì¶ *–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {order_id}*\n"
                    f"üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å:* {data.get('charge', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')} —Ä—É–±.\n"
                    f"üõ† *–£—Å–ª—É–≥–∞:* {data.get('service', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n"
                    f"üìå *–°—Ç–∞—Ç—É—Å:* {data.get('status', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n"
                    f"üìâ *–û—Å—Ç–∞–ª–æ—Å—å:* {data.get('remains', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n"
                )

                return status_message

        except aiohttp.ClientError as http_error:
            logging.error(f"–û—à–∏–±–∫–∞ HTTP-–∑–∞–ø—Ä–æ—Å–∞: {http_error}")
            return "‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ."

        except Exception as e:
            logging.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            return "‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        ["üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", "üí∞ –ë–∞–ª–∞–Ω—Å"],
        ["üì¶ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data.startswith("serv_"):
        service_id = query.data.split("_")[1]
        context.user_data["selected_service_id"] = service_id
        
        services = context.user_data.get("services", {})
        service_info = services.get(f"serv_{service_id}")
        if service_info:
            context.user_data["service_info"] = service_info[1]
        
        await query.message.reply_text(
            f"üìã –í—ã–±—Ä–∞–Ω–∞ —É—Å–ª—É–≥–∞:\n{context.user_data['service_info']}\n\n"
            "üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –∏–ª–∏ –ø–æ—Å—Ç:"
        )
        context.user_data["awaiting_link"] = True
    
    elif query.data.startswith("cat_"):
        index = int(query.data.split("_")[1])
        category = context.user_data["categories"][index]
        services = await fetch_services(category)

        if not services:
            await query.message.reply_text("‚ùå –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —É—Å–ª—É–≥.")
            return

        keyboard = [
            [InlineKeyboardButton(service[1], callback_data=f"serv_{service[0]}")]
            for service in services
        ]
        context.user_data["services"] = {f"serv_{service[0]}": service for service in services}

        await query.message.reply_text(
            f"‚úÖ –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *{category}*: ",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
    
    elif query.data == "confirm_order":
        order_details = context.user_data.get("order_details", {})
        order_id = await place_order(
            order_details["service_id"],
            order_details["link"],
            order_details["quantity"]
        )
        
        if order_id:
            total_price, rate = await calculate_price(
                order_details["service_id"],
                order_details["quantity"]
            )
            
            success_message = (
                "‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω!\n\n"
                f"üì¶ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_id}\n"
                f"üîó –°—Å—ã–ª–∫–∞: {order_details['link']}\n"
                f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {order_details['quantity']}\n"
                f"üí∞ –¶–µ–Ω–∞ –∑–∞ 1000: {rate:.2f} ‚ÇΩ\n"
                f"üíµ –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_price:.2f} ‚ÇΩ"
            )
            await query.message.reply_text(success_message)
        else:
            await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        
        context.user_data.clear()
    
    elif query.data == "cancel_order":
        await query.message.reply_text("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω")
        context.user_data.clear()

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()

    if text == "üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑":
        categories = await fetch_categories()
        if not categories:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
            return

        keyboard = [[InlineKeyboardButton(cat, callback_data=f"cat_{i}")] for i, cat in enumerate(categories)]
        context.user_data["categories"] = categories
        await update.message.reply_text("üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=InlineKeyboardMarkup(keyboard))

    elif text == "üí∞ –ë–∞–ª–∞–Ω—Å":
        balance = await fetch_balance()
        await update.message.reply_text(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} ‚ÇΩ")

    elif text == "üì¶ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞":
        await update.message.reply_text("üîé –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:")
        context.user_data["awaiting_order_status"] = True

    elif text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑":
        await update.message.reply_text(
            "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ—Ç–º–µ–Ω—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–º–∞–∫—Å–∏–º—É–º 100 –∑–∞–∫–∞–∑–æ–≤):\n"
            "–ü—Ä–∏–º–µ—Ä: 12345,12346,12347"
        )
        context.user_data["awaiting_cancel_orders"] = True

    elif context.user_data.get("awaiting_link"):
        context.user_data["link"] = text
        context.user_data["awaiting_link"] = False
        context.user_data["awaiting_quantity"] = True
        await update.message.reply_text(
            "üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–º–∏–Ω–∏–º—É–º 10, –º–∞–∫—Å–∏–º—É–º 50 000):\n\n"
            "üí° –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–∞ –∏—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞."
        )

    elif context.user_data.get("awaiting_quantity"):
        try:
            quantity = int(text)
            if quantity < 10 or quantity > 50000:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 10 –¥–æ 50 000")
                return
                
            service_id = context.user_data.get("selected_service_id")
            link = context.user_data.get("link")
            
            if not all([service_id, link]):
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å–ª—É–≥–µ –∏–ª–∏ —Å—Å—ã–ª–∫–µ")
                return

            total_price, rate = await calculate_price(service_id, quantity)
            if total_price is None:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞")
                return

            keyboard = [
                [
                    InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_order"),
                    InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_order")
                ]
            ]
            confirmation_message = (
                f"üìã –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞:\n\n"
                f"üîó –°—Å—ã–ª–∫–∞: {link}\n"
                f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}\n"
                f"üí∞ –¶–µ–Ω–∞ –∑–∞ 1000: {rate:.2f} ‚ÇΩ\n"
                f"üíµ –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_price:.2f} ‚ÇΩ\n\n"
                "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –∑–∞–∫–∞–∑:"
            )
            await update.message.reply_text(
                confirmation_message,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
            context.user_data["order_details"] = {
                "service_id": service_id,
                "link": link,
                "quantity": quantity
            }

        except ValueError:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
            return

    elif context.user_data.get("awaiting_order_status"):
        order_id = text
        context.user_data["awaiting_order_status"] = False
        
        if not order_id.isdigit():
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞.")
            return
        
        status = await fetch_order_status(order_id)
        await update.message.reply_text(status, parse_mode="Markdown")

    elif context.user_data.get("awaiting_cancel_orders"):
        context.user_data["awaiting_cancel_orders"] = False
        
        order_ids = text.strip().split(",")
        if len(order_ids) > 100:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –º–∞–∫—Å–∏–º—É–º 100 –∑–∞–∫–∞–∑–æ–≤ –∑–∞ —Ä–∞–∑")
            return
            
        if not all(order_id.strip().isdigit() for order_id in order_ids):
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –≤—Å–µ ID –∑–∞–∫–∞–∑–æ–≤ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏")
            return
            
        result = await cancel_orders(text.strip())
        await update.message.reply_text(result)

def main():
    app = Application.builder().token(BOT_TOKEN).build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    logging.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()